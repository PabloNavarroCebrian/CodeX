
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Mon May 13 12:48:38 CEST 2024
//----------------------------------------------------

package ast;

import java_cup.runtime.*;
import alex.AnalizadorLexico;
import alex.UnidadLexica;
import alex.TokenValue;
import errors.GestionErrores;
import java.util.ArrayList;
import ast.*;
import ast.Expresiones.*;
import ast.Tipos.*;
import ast.Instrucciones.*;
import ast.Expresiones.Accesos.*;
import ast.Declaraciones.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Mon May 13 12:48:38 CEST 2024
  */
public class ConstructorAST extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorAST() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorAST(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorAST(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\204\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\004\007\000" +
    "\002\004\005\000\002\004\006\000\002\004\005\000\002" +
    "\004\007\000\002\005\010\000\002\005\010\000\002\005" +
    "\010\000\002\006\006\000\002\006\002\000\002\006\005" +
    "\000\002\007\006\000\002\010\004\000\002\010\004\000" +
    "\002\010\005\000\002\011\005\000\002\011\004\000\002" +
    "\012\005\000\002\012\004\000\002\013\007\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\011" +
    "\000\002\014\003\000\002\014\004\000\002\015\007\000" +
    "\002\015\010\000\002\016\004\000\002\016\004\000\002" +
    "\017\004\000\002\017\004\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\021\011\000\002\021\007\000\002" +
    "\021\005\000\002\021\007\000\002\022\020\000\002\022" +
    "\014\000\002\022\005\000\002\023\007\000\002\023\005" +
    "\000\002\024\007\000\002\024\005\000\002\024\005\000" +
    "\002\025\006\000\002\025\006\000\002\026\005\000\002" +
    "\026\004\000\002\026\005\000\002\026\004\000\002\027" +
    "\007\000\002\027\005\000\002\027\007\000\002\030\007" +
    "\000\002\030\005\000\002\030\007\000\002\031\005\000" +
    "\002\031\005\000\002\033\004\000\002\033\004\000\002" +
    "\033\005\000\002\034\005\000\002\034\004\000\002\035" +
    "\005\000\002\035\003\000\002\036\005\000\002\036\003" +
    "\000\002\037\005\000\002\037\005\000\002\037\003\000" +
    "\002\040\005\000\002\040\003\000\002\040\004\000\002" +
    "\041\005\000\002\041\003\000\002\042\005\000\002\042" +
    "\003\000\002\043\004\000\002\043\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\005\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\045\006\000\002\045\005\000\002\045" +
    "\003\000\002\046\003\000\002\046\004\000\002\046\004" +
    "\000\002\046\006\000\002\046\006\000\002\053\004\000" +
    "\002\053\004\000\002\054\005\000\002\054\004\000\002" +
    "\055\004\000\002\055\004\000\002\056\005\000\002\056" +
    "\004\000\002\032\004\000\002\047\003\000\002\047\003" +
    "\000\002\047\003\000\002\047\003\000\002\050\003\000" +
    "\002\050\003\000\002\051\003\000\002\051\003\000\002" +
    "\051\003\000\002\052\003\000\002\052\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0103\000\022\003\016\037\006\040\023\041\022\042" +
    "\011\043\005\055\004\057\014\001\002\000\004\057\u0102" +
    "\001\002\000\044\003\uffe3\010\uffe3\013\uffe3\014\uffe3\015" +
    "\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\025\uffe3" +
    "\027\uffe3\031\uffe3\033\uffe3\034\uffe3\036\uffe3\057\uffe3\001" +
    "\002\000\004\020\374\001\002\000\004\002\373\001\002" +
    "\000\022\003\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043" +
    "\ufffb\055\ufffb\057\ufffb\001\002\000\044\003\uffe4\010\uffe4" +
    "\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021" +
    "\uffe4\022\uffe4\025\uffe4\027\uffe4\031\uffe4\033\uffe4\034\uffe4" +
    "\036\uffe4\057\uffe4\001\002\000\004\002\uffff\001\002\000" +
    "\022\003\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc" +
    "\055\ufffc\057\ufffc\001\002\000\044\003\uffe1\010\uffe1\013" +
    "\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1" +
    "\022\uffe1\025\uffe1\027\uffe1\031\uffe1\033\uffe1\034\uffe1\036" +
    "\uffe1\057\uffe1\001\002\000\006\010\033\057\344\001\002" +
    "\000\004\002\ufffe\001\002\000\022\003\ufffd\037\ufffd\040" +
    "\ufffd\041\ufffd\042\ufffd\043\ufffd\055\ufffd\057\ufffd\001\002" +
    "\000\022\003\016\037\006\040\023\041\022\042\011\043" +
    "\005\055\004\057\014\001\002\000\022\003\ufffa\037\ufffa" +
    "\040\ufffa\041\ufffa\042\ufffa\043\ufffa\055\ufffa\057\ufffa\001" +
    "\002\000\010\010\uffe5\052\045\057\uffe5\001\002\000\004" +
    "\057\024\001\002\000\006\003\025\030\026\001\002\000" +
    "\016\031\ufff0\037\006\041\031\042\011\043\005\057\014" +
    "\001\002\000\016\031\ufff0\037\006\041\031\042\011\043" +
    "\005\057\014\001\002\000\004\031\037\001\002\000\006" +
    "\010\033\057\032\001\002\000\044\003\uffe5\010\uffe5\013" +
    "\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5" +
    "\022\uffe5\025\uffe5\027\uffe5\031\uffe5\033\uffe5\034\uffe5\036" +
    "\uffe5\057\uffe5\001\002\000\006\003\034\034\035\001\002" +
    "\000\044\003\uffe0\010\uffe0\013\uffe0\014\uffe0\015\uffe0\016" +
    "\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\025\uffe0\027\uffe0" +
    "\031\uffe0\033\uffe0\034\uffe0\036\uffe0\057\uffe0\001\002\000" +
    "\004\031\uffef\001\002\000\016\031\ufff0\037\006\041\031" +
    "\042\011\043\005\057\014\001\002\000\004\031\ufff1\001" +
    "\002\000\006\003\040\034\041\001\002\000\022\003\ufff3" +
    "\037\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\055\ufff3\057" +
    "\ufff3\001\002\000\022\003\ufff4\037\ufff4\040\ufff4\041\ufff4" +
    "\042\ufff4\043\ufff4\055\ufff4\057\ufff4\001\002\000\004\031" +
    "\043\001\002\000\004\034\044\001\002\000\022\003\ufff2" +
    "\037\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2\055\ufff2\057" +
    "\ufff2\001\002\000\004\024\046\001\002\000\006\003\050" +
    "\025\047\001\002\000\004\030\053\001\002\000\004\025" +
    "\051\001\002\000\004\030\053\001\002\000\004\002\uffde" +
    "\001\002\000\036\010\070\031\100\036\102\037\006\041" +
    "\031\042\011\043\005\045\061\046\064\050\056\051\103" +
    "\053\054\054\066\057\067\001\002\000\006\003\333\024" +
    "\334\001\002\000\036\010\uffd5\031\uffd5\036\uffd5\037\uffd5" +
    "\041\uffd5\042\uffd5\043\uffd5\045\uffd5\046\uffd5\050\uffd5\051" +
    "\uffd5\053\uffd5\054\uffd5\057\uffd5\001\002\000\006\003\325" +
    "\024\326\001\002\000\056\003\uff97\006\uff97\007\uff97\010" +
    "\uff97\011\uff97\012\uff97\013\uff97\014\uff97\015\uff97\016\uff97" +
    "\017\uff97\020\uff97\021\uff97\022\uff97\025\uff97\026\uff97\027" +
    "\uff97\031\uff97\032\uff97\033\uff97\034\uff97\035\uff97\001\002" +
    "\000\036\010\uffd6\031\uffd6\036\uffd6\037\uffd6\041\uffd6\042" +
    "\uffd6\043\uffd6\045\uffd6\046\uffd6\050\uffd6\051\uffd6\053\uffd6" +
    "\054\uffd6\057\uffd6\001\002\000\036\003\321\004\113\005" +
    "\131\007\136\010\070\023\110\024\130\026\126\030\125" +
    "\034\322\036\102\044\132\056\135\057\120\001\002\000" +
    "\036\010\uffd7\031\uffd7\036\uffd7\037\uffd7\041\uffd7\042\uffd7" +
    "\043\uffd7\045\uffd7\046\uffd7\050\uffd7\051\uffd7\053\uffd7\054" +
    "\uffd7\057\uffd7\001\002\000\036\010\uffd2\031\uffd2\036\uffd2" +
    "\037\uffd2\041\uffd2\042\uffd2\043\uffd2\045\uffd2\046\uffd2\050" +
    "\uffd2\051\uffd2\053\uffd2\054\uffd2\057\uffd2\001\002\000\006" +
    "\003\306\024\307\001\002\000\010\026\212\032\302\035" +
    "\211\001\002\000\006\003\273\024\274\001\002\000\016" +
    "\010\uffe1\024\222\026\uff96\032\uff96\035\uff96\057\uffe1\001" +
    "\002\000\012\010\070\024\265\036\102\057\207\001\002" +
    "\000\050\002\uffdd\003\uffdd\010\uffdd\031\uffdd\036\uffdd\037" +
    "\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\045\uffdd\046\uffdd" +
    "\047\uffdd\050\uffdd\051\uffdd\053\uffdd\054\uffdd\055\uffdd\057" +
    "\uffdd\001\002\000\036\010\uffd9\031\uffd9\036\uffd9\037\uffd9" +
    "\041\uffd9\042\uffd9\043\uffd9\045\uffd9\046\uffd9\050\uffd9\051" +
    "\uffd9\053\uffd9\054\uffd9\057\uffd9\001\002\000\006\010\033" +
    "\057\256\001\002\000\036\010\070\031\255\036\102\037" +
    "\006\041\031\042\011\043\005\045\061\046\064\050\056" +
    "\051\103\053\054\054\066\057\067\001\002\000\036\010" +
    "\uffd1\031\uffd1\036\uffd1\037\uffd1\041\uffd1\042\uffd1\043\uffd1" +
    "\045\uffd1\046\uffd1\050\uffd1\051\uffd1\053\uffd1\054\uffd1\057" +
    "\uffd1\001\002\000\036\010\uffd8\031\uffd8\036\uffd8\037\uffd8" +
    "\041\uffd8\042\uffd8\043\uffd8\045\uffd8\046\uffd8\050\uffd8\051" +
    "\uffd8\053\uffd8\054\uffd8\057\uffd8\001\002\000\036\010\uffd3" +
    "\031\uffd3\036\uffd3\037\uffd3\041\uffd3\042\uffd3\043\uffd3\045" +
    "\uffd3\046\uffd3\050\uffd3\051\uffd3\053\uffd3\054\uffd3\057\uffd3" +
    "\001\002\000\050\002\uffdc\003\uffdc\010\uffdc\031\uffdc\036" +
    "\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\045\uffdc" +
    "\046\uffdc\047\uffdc\050\uffdc\051\uffdc\053\uffdc\054\uffdc\055" +
    "\uffdc\057\uffdc\001\002\000\036\010\uffd4\031\uffd4\036\uffd4" +
    "\037\uffd4\041\uffd4\042\uffd4\043\uffd4\045\uffd4\046\uffd4\050" +
    "\uffd4\051\uffd4\053\uffd4\054\uffd4\057\uffd4\001\002\000\012" +
    "\010\070\024\251\036\102\057\207\001\002\000\006\003" +
    "\104\024\105\001\002\000\004\030\053\001\002\000\016" +
    "\034\107\037\006\041\031\042\011\043\005\057\014\001" +
    "\002\000\006\010\033\057\234\001\002\000\032\004\113" +
    "\005\131\007\136\010\070\023\110\024\130\026\126\030" +
    "\125\036\102\044\132\056\135\057\120\001\002\000\030" +
    "\004\uff7f\005\uff7f\007\uff7f\010\uff7f\023\uff7f\024\uff7f\026" +
    "\uff7f\030\uff7f\036\uff7f\056\uff7f\057\uff7f\001\002\000\050" +
    "\003\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013" +
    "\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2" +
    "\022\uffa2\025\uffa2\027\uffa2\031\uffa2\033\uffa2\034\uffa2\001" +
    "\002\000\050\003\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4" +
    "\012\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020" +
    "\uffa4\021\uffa4\022\uffa4\025\uffa4\027\uffa4\031\uffa4\033\uffa4" +
    "\034\uffa4\001\002\000\050\003\uffa0\006\uffa0\007\uffa0\010" +
    "\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0" +
    "\017\uffa0\020\uffa0\021\uffa0\022\uffa0\025\uffa0\027\uffa0\031" +
    "\uffa0\033\uffa0\034\uffa0\001\002\000\050\003\uffa6\006\uffa6" +
    "\007\uffa6\010\167\011\166\012\164\013\uffa6\014\uffa6\015" +
    "\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\025\uffa6" +
    "\027\uffa6\031\uffa6\033\uffa6\034\uffa6\001\002\000\054\003" +
    "\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1" +
    "\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022" +
    "\uffa1\025\uffa1\026\212\027\uffa1\031\uffa1\033\uffa1\034\uffa1" +
    "\035\211\001\002\000\042\003\uffa9\006\162\007\160\013" +
    "\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9" +
    "\022\uffa9\025\uffa9\027\uffa9\031\uffa9\033\uffa9\034\uffa9\001" +
    "\002\000\036\003\uffab\013\uffab\014\uffab\015\uffab\016\uffab" +
    "\017\155\020\154\021\152\022\156\025\uffab\027\uffab\031" +
    "\uffab\033\uffab\034\uffab\001\002\000\056\003\uff96\006\uff96" +
    "\007\uff96\010\uff96\011\uff96\012\uff96\013\uff96\014\uff96\015" +
    "\uff96\016\uff96\017\uff96\020\uff96\021\uff96\022\uff96\024\222" +
    "\025\uff96\026\uff96\027\uff96\031\uff96\033\uff96\034\uff96\035" +
    "\uff96\001\002\000\006\013\143\034\206\001\002\000\026" +
    "\003\uffae\013\uffae\014\uffae\015\147\016\150\025\uffae\027" +
    "\uffae\031\uffae\033\uffae\034\uffae\001\002\000\022\003\uffb0" +
    "\013\uffb0\014\145\025\uffb0\027\uffb0\031\uffb0\033\uffb0\034" +
    "\uffb0\001\002\000\050\003\uff9a\006\uff9a\007\uff9a\010\uff9a" +
    "\011\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\017" +
    "\uff9a\020\uff9a\021\uff9a\022\uff9a\025\uff9a\027\uff9a\031\uff9a" +
    "\033\uff9a\034\uff9a\001\002\000\034\004\113\005\131\007" +
    "\136\010\070\023\110\024\130\026\126\030\125\031\202" +
    "\036\102\044\132\056\135\057\120\001\002\000\034\004" +
    "\113\005\131\007\136\010\070\023\110\024\130\026\126" +
    "\027\172\030\125\036\102\044\132\056\135\057\120\001" +
    "\002\000\050\003\uff9b\006\uff9b\007\uff9b\010\uff9b\011\uff9b" +
    "\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020" +
    "\uff9b\021\uff9b\022\uff9b\025\uff9b\027\uff9b\031\uff9b\033\uff9b" +
    "\034\uff9b\001\002\000\032\004\113\005\131\007\136\010" +
    "\070\023\110\024\130\026\126\030\125\036\102\044\132" +
    "\056\135\057\120\001\002\000\050\003\uff9f\006\uff9f\007" +
    "\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f" +
    "\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\025\uff9f\027" +
    "\uff9f\031\uff9f\033\uff9f\034\uff9f\001\002\000\014\037\006" +
    "\041\031\042\011\043\005\057\014\001\002\000\030\004" +
    "\113\005\131\007\136\010\070\023\110\024\130\026\126" +
    "\030\125\036\102\056\135\057\120\001\002\000\050\003" +
    "\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c" +
    "\014\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\022" +
    "\uff9c\025\uff9c\027\uff9c\031\uff9c\033\uff9c\034\uff9c\001\002" +
    "\000\050\003\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e\012" +
    "\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e" +
    "\021\uff9e\022\uff9e\025\uff9e\027\uff9e\031\uff9e\033\uff9e\034" +
    "\uff9e\001\002\000\030\004\uff7e\005\uff7e\007\uff7e\010\uff7e" +
    "\023\uff7e\024\uff7e\026\uff7e\030\uff7e\036\uff7e\056\uff7e\057" +
    "\uff7e\001\002\000\050\003\uffa3\006\uffa3\007\uffa3\010\uffa3" +
    "\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3\017" +
    "\uffa3\020\uffa3\021\uffa3\022\uffa3\025\uffa3\027\uffa3\031\uffa3" +
    "\033\uffa3\034\uffa3\001\002\000\040\003\uffa8\010\033\013" +
    "\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8" +
    "\022\uffa8\025\uffa8\027\uffa8\031\uffa8\033\uffa8\034\uffa8\001" +
    "\002\000\006\013\143\025\142\001\002\000\050\003\uff9d" +
    "\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d\014" +
    "\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d" +
    "\025\uff9d\027\uff9d\031\uff9d\033\uff9d\034\uff9d\001\002\000" +
    "\032\004\113\005\131\007\136\010\070\023\110\024\130" +
    "\026\126\030\125\036\102\044\132\056\135\057\120\001" +
    "\002\000\022\003\uffb1\013\uffb1\014\145\025\uffb1\027\uffb1" +
    "\031\uffb1\033\uffb1\034\uffb1\001\002\000\032\004\113\005" +
    "\131\007\136\010\070\023\110\024\130\026\126\030\125" +
    "\036\102\044\132\056\135\057\120\001\002\000\026\003" +
    "\uffaf\013\uffaf\014\uffaf\015\147\016\150\025\uffaf\027\uffaf" +
    "\031\uffaf\033\uffaf\034\uffaf\001\002\000\032\004\113\005" +
    "\131\007\136\010\070\023\110\024\130\026\126\030\125" +
    "\036\102\044\132\056\135\057\120\001\002\000\032\004" +
    "\113\005\131\007\136\010\070\023\110\024\130\026\126" +
    "\030\125\036\102\044\132\056\135\057\120\001\002\000" +
    "\036\003\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017\155" +
    "\020\154\021\152\022\156\025\uffac\027\uffac\031\uffac\033" +
    "\uffac\034\uffac\001\002\000\030\004\uff86\005\uff86\007\uff86" +
    "\010\uff86\023\uff86\024\uff86\026\uff86\030\uff86\036\uff86\056" +
    "\uff86\057\uff86\001\002\000\030\004\113\005\131\007\136" +
    "\010\070\023\110\024\130\026\126\030\125\036\102\056" +
    "\135\057\120\001\002\000\030\004\uff87\005\uff87\007\uff87" +
    "\010\uff87\023\uff87\024\uff87\026\uff87\030\uff87\036\uff87\056" +
    "\uff87\057\uff87\001\002\000\030\004\uff88\005\uff88\007\uff88" +
    "\010\uff88\023\uff88\024\uff88\026\uff88\030\uff88\036\uff88\056" +
    "\uff88\057\uff88\001\002\000\030\004\uff85\005\uff85\007\uff85" +
    "\010\uff85\023\uff85\024\uff85\026\uff85\030\uff85\036\uff85\056" +
    "\uff85\057\uff85\001\002\000\042\003\uffaa\006\162\007\160" +
    "\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021" +
    "\uffaa\022\uffaa\025\uffaa\027\uffaa\031\uffaa\033\uffaa\034\uffaa" +
    "\001\002\000\030\004\uff83\005\uff83\007\uff83\010\uff83\023" +
    "\uff83\024\uff83\026\uff83\030\uff83\036\uff83\056\uff83\057\uff83" +
    "\001\002\000\030\004\113\005\131\007\136\010\070\023" +
    "\110\024\130\026\126\030\125\036\102\056\135\057\120" +
    "\001\002\000\030\004\uff84\005\uff84\007\uff84\010\uff84\023" +
    "\uff84\024\uff84\026\uff84\030\uff84\036\uff84\056\uff84\057\uff84" +
    "\001\002\000\050\003\uffa7\006\uffa7\007\uffa7\010\167\011" +
    "\166\012\164\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7" +
    "\020\uffa7\021\uffa7\022\uffa7\025\uffa7\027\uffa7\031\uffa7\033" +
    "\uffa7\034\uffa7\001\002\000\030\004\uff80\005\uff80\007\uff80" +
    "\010\uff80\023\uff80\024\uff80\026\uff80\030\uff80\036\uff80\056" +
    "\uff80\057\uff80\001\002\000\030\004\113\005\131\007\136" +
    "\010\070\023\110\024\130\026\126\030\125\036\102\056" +
    "\135\057\120\001\002\000\030\004\uff81\005\uff81\007\uff81" +
    "\010\uff81\023\uff81\024\uff81\026\uff81\030\uff81\036\uff81\056" +
    "\uff81\057\uff81\001\002\000\030\004\uff82\005\uff82\007\uff82" +
    "\010\uff82\023\uff82\024\uff82\026\uff82\030\uff82\036\uff82\056" +
    "\uff82\057\uff82\001\002\000\050\003\uffa5\006\uffa5\007\uffa5" +
    "\010\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016" +
    "\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\025\uffa5\027\uffa5" +
    "\031\uffa5\033\uffa5\034\uffa5\001\002\000\036\003\uffad\013" +
    "\uffad\014\uffad\015\uffad\016\uffad\017\155\020\154\021\152" +
    "\022\156\025\uffad\027\uffad\031\uffad\033\uffad\034\uffad\001" +
    "\002\000\050\003\uff90\006\uff90\007\uff90\010\uff90\011\uff90" +
    "\012\uff90\013\uff90\014\uff90\015\uff90\016\uff90\017\uff90\020" +
    "\uff90\021\uff90\022\uff90\025\uff90\027\uff90\031\uff90\033\uff90" +
    "\034\uff90\001\002\000\010\013\143\027\176\033\175\001" +
    "\002\000\050\003\uff91\006\uff91\007\uff91\010\uff91\011\uff91" +
    "\012\uff91\013\uff91\014\uff91\015\uff91\016\uff91\017\uff91\020" +
    "\uff91\021\uff91\022\uff91\025\uff91\027\uff91\031\uff91\033\uff91" +
    "\034\uff91\001\002\000\032\004\113\005\131\007\136\010" +
    "\070\023\110\024\130\026\126\030\125\036\102\044\132" +
    "\056\135\057\120\001\002\000\050\003\uff8e\006\uff8e\007" +
    "\uff8e\010\uff8e\011\uff8e\012\uff8e\013\uff8e\014\uff8e\015\uff8e" +
    "\016\uff8e\017\uff8e\020\uff8e\021\uff8e\022\uff8e\025\uff8e\027" +
    "\uff8e\031\uff8e\033\uff8e\034\uff8e\001\002\000\050\003\uff8f" +
    "\006\uff8f\007\uff8f\010\uff8f\011\uff8f\012\uff8f\013\uff8f\014" +
    "\uff8f\015\uff8f\016\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f" +
    "\025\uff8f\027\uff8f\031\uff8f\033\uff8f\034\uff8f\001\002\000" +
    "\010\013\143\031\204\033\203\001\002\000\050\003\uff8d" +
    "\006\uff8d\007\uff8d\010\uff8d\011\uff8d\012\uff8d\013\uff8d\014" +
    "\uff8d\015\uff8d\016\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d" +
    "\025\uff8d\027\uff8d\031\uff8d\033\uff8d\034\uff8d\001\002\000" +
    "\050\003\uff8c\006\uff8c\007\uff8c\010\uff8c\011\uff8c\012\uff8c" +
    "\013\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c\021" +
    "\uff8c\022\uff8c\025\uff8c\027\uff8c\031\uff8c\033\uff8c\034\uff8c" +
    "\001\002\000\032\004\113\005\131\007\136\010\070\023" +
    "\110\024\130\026\126\030\125\036\102\044\132\056\135" +
    "\057\120\001\002\000\050\003\uff8a\006\uff8a\007\uff8a\010" +
    "\uff8a\011\uff8a\012\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a" +
    "\017\uff8a\020\uff8a\021\uff8a\022\uff8a\025\uff8a\027\uff8a\031" +
    "\uff8a\033\uff8a\034\uff8a\001\002\000\050\003\uff8b\006\uff8b" +
    "\007\uff8b\010\uff8b\011\uff8b\012\uff8b\013\uff8b\014\uff8b\015" +
    "\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b\025\uff8b" +
    "\027\uff8b\031\uff8b\033\uff8b\034\uff8b\001\002\000\010\010" +
    "\070\036\102\057\207\001\002\000\056\003\uff96\006\uff96" +
    "\007\uff96\010\uff96\011\uff96\012\uff96\013\uff96\014\uff96\015" +
    "\uff96\016\uff96\017\uff96\020\uff96\021\uff96\022\uff96\025\uff96" +
    "\026\uff96\027\uff96\031\uff96\032\uff96\033\uff96\034\uff96\035" +
    "\uff96\001\002\000\010\026\212\032\213\035\211\001\002" +
    "\000\004\057\221\001\002\000\032\004\113\005\131\007" +
    "\136\010\070\023\110\024\130\026\126\030\125\036\102" +
    "\044\132\056\135\057\120\001\002\000\032\004\113\005" +
    "\131\007\136\010\070\023\110\024\130\026\126\030\125" +
    "\036\102\044\132\056\135\057\120\001\002\000\006\013" +
    "\143\025\215\001\002\000\004\030\053\001\002\000\036" +
    "\010\uffcb\031\uffcb\036\uffcb\037\uffcb\041\uffcb\042\uffcb\043" +
    "\uffcb\045\uffcb\046\uffcb\050\uffcb\051\uffcb\053\uffcb\054\uffcb" +
    "\057\uffcb\001\002\000\006\013\143\027\220\001\002\000" +
    "\056\003\uff99\006\uff99\007\uff99\010\uff99\011\uff99\012\uff99" +
    "\013\uff99\014\uff99\015\uff99\016\uff99\017\uff99\020\uff99\021" +
    "\uff99\022\uff99\025\uff99\026\uff99\027\uff99\031\uff99\032\uff99" +
    "\033\uff99\034\uff99\035\uff99\001\002\000\056\003\uff98\006" +
    "\uff98\007\uff98\010\uff98\011\uff98\012\uff98\013\uff98\014\uff98" +
    "\015\uff98\016\uff98\017\uff98\020\uff98\021\uff98\022\uff98\025" +
    "\uff98\026\uff98\027\uff98\031\uff98\032\uff98\033\uff98\034\uff98" +
    "\035\uff98\001\002\000\036\003\227\004\113\005\131\007" +
    "\136\010\070\023\110\024\130\025\224\026\126\030\125" +
    "\036\102\044\132\056\135\057\120\001\002\000\050\003" +
    "\uff89\006\uff89\007\uff89\010\uff89\011\uff89\012\uff89\013\uff89" +
    "\014\uff89\015\uff89\016\uff89\017\uff89\020\uff89\021\uff89\022" +
    "\uff89\025\uff89\027\uff89\031\uff89\033\uff89\034\uff89\001\002" +
    "\000\050\003\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012" +
    "\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5" +
    "\021\uffb5\022\uffb5\025\uffb5\027\uffb5\031\uffb5\033\uffb5\034" +
    "\uffb5\001\002\000\050\003\uffb6\006\uffb6\007\uffb6\010\uffb6" +
    "\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017" +
    "\uffb6\020\uffb6\021\uffb6\022\uffb6\025\uffb6\027\uffb6\031\uffb6" +
    "\033\uffb6\034\uffb6\001\002\000\010\013\143\025\232\033" +
    "\231\001\002\000\004\025\230\001\002\000\050\003\uffb4" +
    "\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014" +
    "\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4" +
    "\025\uffb4\027\uffb4\031\uffb4\033\uffb4\034\uffb4\001\002\000" +
    "\032\004\113\005\131\007\136\010\070\023\110\024\130" +
    "\026\126\030\125\036\102\044\132\056\135\057\120\001" +
    "\002\000\050\003\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2" +
    "\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020" +
    "\uffb2\021\uffb2\022\uffb2\025\uffb2\027\uffb2\031\uffb2\033\uffb2" +
    "\034\uffb2\001\002\000\050\003\uffb3\006\uffb3\007\uffb3\010" +
    "\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3" +
    "\017\uffb3\020\uffb3\021\uffb3\022\uffb3\025\uffb3\027\uffb3\031" +
    "\uffb3\033\uffb3\034\uffb3\001\002\000\004\032\235\001\002" +
    "\000\032\004\113\005\131\007\136\010\070\023\110\024" +
    "\130\026\126\030\125\036\102\044\132\056\135\057\120" +
    "\001\002\000\006\013\143\034\237\001\002\000\032\004" +
    "\113\005\131\007\136\010\070\023\110\024\130\026\126" +
    "\030\125\036\102\044\132\056\135\057\120\001\002\000" +
    "\006\013\143\034\241\001\002\000\010\010\070\036\102" +
    "\057\207\001\002\000\010\026\212\032\243\035\211\001" +
    "\002\000\032\004\113\005\131\007\136\010\070\023\110" +
    "\024\130\026\126\030\125\036\102\044\132\056\135\057" +
    "\120\001\002\000\006\013\143\025\245\001\002\000\004" +
    "\030\053\001\002\000\036\010\uffcc\031\uffcc\036\uffcc\037" +
    "\uffcc\041\uffcc\042\uffcc\043\uffcc\045\uffcc\046\uffcc\050\uffcc" +
    "\051\uffcc\053\uffcc\054\uffcc\057\uffcc\001\002\000\036\010" +
    "\uffca\031\uffca\036\uffca\037\uffca\041\uffca\042\uffca\043\uffca" +
    "\045\uffca\046\uffca\050\uffca\051\uffca\053\uffca\054\uffca\057" +
    "\uffca\001\002\000\056\003\uff94\006\uff94\007\uff94\010\uff94" +
    "\011\uff94\012\uff94\013\uff94\014\uff94\015\uff94\016\uff94\017" +
    "\uff94\020\uff94\021\uff94\022\uff94\025\uff94\026\uff94\027\uff94" +
    "\031\uff94\032\uff94\033\uff94\034\uff94\035\uff94\001\002\000" +
    "\010\010\070\036\102\057\207\001\002\000\010\025\253" +
    "\026\212\035\211\001\002\000\056\003\uff92\006\uff92\007" +
    "\uff92\010\uff92\011\uff92\012\uff92\013\uff92\014\uff92\015\uff92" +
    "\016\uff92\017\uff92\020\uff92\021\uff92\022\uff92\025\uff92\026" +
    "\uff92\027\uff92\031\uff92\032\uff92\033\uff92\034\uff92\035\uff92" +
    "\001\002\000\050\002\uffdb\003\uffdb\010\uffdb\031\uffdb\036" +
    "\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\045\uffdb" +
    "\046\uffdb\047\uffdb\050\uffdb\051\uffdb\053\uffdb\054\uffdb\055" +
    "\uffdb\057\uffdb\001\002\000\050\002\uffda\003\uffda\010\uffda" +
    "\031\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043" +
    "\uffda\045\uffda\046\uffda\047\uffda\050\uffda\051\uffda\053\uffda" +
    "\054\uffda\055\uffda\057\uffda\001\002\000\010\003\257\032" +
    "\260\034\261\001\002\000\036\010\uffc5\031\uffc5\036\uffc5" +
    "\037\uffc5\041\uffc5\042\uffc5\043\uffc5\045\uffc5\046\uffc5\050" +
    "\uffc5\051\uffc5\053\uffc5\054\uffc5\057\uffc5\001\002\000\032" +
    "\004\113\005\131\007\136\010\070\023\110\024\130\026" +
    "\126\030\125\036\102\044\132\056\135\057\120\001\002" +
    "\000\036\010\uffc6\031\uffc6\036\uffc6\037\uffc6\041\uffc6\042" +
    "\uffc6\043\uffc6\045\uffc6\046\uffc6\050\uffc6\051\uffc6\053\uffc6" +
    "\054\uffc6\057\uffc6\001\002\000\006\013\143\034\263\001" +
    "\002\000\036\010\uffc7\031\uffc7\036\uffc7\037\uffc7\041\uffc7" +
    "\042\uffc7\043\uffc7\045\uffc7\046\uffc7\050\uffc7\051\uffc7\053" +
    "\uffc7\054\uffc7\057\uffc7\001\002\000\056\003\uff95\006\uff95" +
    "\007\uff95\010\uff95\011\uff95\012\uff95\013\uff95\014\uff95\015" +
    "\uff95\016\uff95\017\uff95\020\uff95\021\uff95\022\uff95\025\uff95" +
    "\026\uff95\027\uff95\031\uff95\032\uff95\033\uff95\034\uff95\035" +
    "\uff95\001\002\000\010\010\070\036\102\057\207\001\002" +
    "\000\010\025\267\026\212\035\211\001\002\000\056\003" +
    "\uff93\006\uff93\007\uff93\010\uff93\011\uff93\012\uff93\013\uff93" +
    "\014\uff93\015\uff93\016\uff93\017\uff93\020\uff93\021\uff93\022" +
    "\uff93\025\uff93\026\uff93\027\uff93\031\uff93\032\uff93\033\uff93" +
    "\034\uff93\035\uff93\001\002\000\006\003\271\034\272\001" +
    "\002\000\036\010\uffb7\031\uffb7\036\uffb7\037\uffb7\041\uffb7" +
    "\042\uffb7\043\uffb7\045\uffb7\046\uffb7\050\uffb7\051\uffb7\053" +
    "\uffb7\054\uffb7\057\uffb7\001\002\000\036\010\uffb8\031\uffb8" +
    "\036\uffb8\037\uffb8\041\uffb8\042\uffb8\043\uffb8\045\uffb8\046" +
    "\uffb8\050\uffb8\051\uffb8\053\uffb8\054\uffb8\057\uffb8\001\002" +
    "\000\004\034\301\001\002\000\032\004\113\005\131\007" +
    "\136\010\070\023\110\024\130\026\126\030\125\036\102" +
    "\044\132\056\135\057\120\001\002\000\006\013\143\025" +
    "\276\001\002\000\006\003\277\034\300\001\002\000\036" +
    "\010\uffb9\031\uffb9\036\uffb9\037\uffb9\041\uffb9\042\uffb9\043" +
    "\uffb9\045\uffb9\046\uffb9\050\uffb9\051\uffb9\053\uffb9\054\uffb9" +
    "\057\uffb9\001\002\000\036\010\uffbb\031\uffbb\036\uffbb\037" +
    "\uffbb\041\uffbb\042\uffbb\043\uffbb\045\uffbb\046\uffbb\050\uffbb" +
    "\051\uffbb\053\uffbb\054\uffbb\057\uffbb\001\002\000\036\010" +
    "\uffba\031\uffba\036\uffba\037\uffba\041\uffba\042\uffba\043\uffba" +
    "\045\uffba\046\uffba\050\uffba\051\uffba\053\uffba\054\uffba\057" +
    "\uffba\001\002\000\032\004\113\005\131\007\136\010\070" +
    "\023\110\024\130\026\126\030\125\036\102\044\132\056" +
    "\135\057\120\001\002\000\010\003\304\013\143\034\305" +
    "\001\002\000\036\010\uffc3\031\uffc3\036\uffc3\037\uffc3\041" +
    "\uffc3\042\uffc3\043\uffc3\045\uffc3\046\uffc3\050\uffc3\051\uffc3" +
    "\053\uffc3\054\uffc3\057\uffc3\001\002\000\036\010\uffc4\031" +
    "\uffc4\036\uffc4\037\uffc4\041\uffc4\042\uffc4\043\uffc4\045\uffc4" +
    "\046\uffc4\050\uffc4\051\uffc4\053\uffc4\054\uffc4\057\uffc4\001" +
    "\002\000\004\030\053\001\002\000\032\004\113\005\131" +
    "\007\136\010\070\023\110\024\130\026\126\030\125\036" +
    "\102\044\132\056\135\057\120\001\002\000\006\013\143" +
    "\025\311\001\002\000\004\030\053\001\002\000\040\010" +
    "\uffcf\031\uffcf\036\uffcf\037\uffcf\041\uffcf\042\uffcf\043\uffcf" +
    "\045\uffcf\046\uffcf\047\313\050\uffcf\051\uffcf\053\uffcf\054" +
    "\uffcf\057\uffcf\001\002\000\004\030\053\001\002\000\036" +
    "\010\uffd0\031\uffd0\036\uffd0\037\uffd0\041\uffd0\042\uffd0\043" +
    "\uffd0\045\uffd0\046\uffd0\050\uffd0\051\uffd0\053\uffd0\054\uffd0" +
    "\057\uffd0\001\002\000\040\010\uffce\031\uffce\036\uffce\037" +
    "\uffce\041\uffce\042\uffce\043\uffce\045\uffce\046\uffce\047\316" +
    "\050\uffce\051\uffce\053\uffce\054\uffce\057\uffce\001\002\000" +
    "\004\030\053\001\002\000\036\010\uffcd\031\uffcd\036\uffcd" +
    "\037\uffcd\041\uffcd\042\uffcd\043\uffcd\045\uffcd\046\uffcd\050" +
    "\uffcd\051\uffcd\053\uffcd\054\uffcd\057\uffcd\001\002\000\010" +
    "\003\323\013\143\034\324\001\002\000\036\010\uffbf\031" +
    "\uffbf\036\uffbf\037\uffbf\041\uffbf\042\uffbf\043\uffbf\045\uffbf" +
    "\046\uffbf\050\uffbf\051\uffbf\053\uffbf\054\uffbf\057\uffbf\001" +
    "\002\000\036\010\uffc1\031\uffc1\036\uffc1\037\uffc1\041\uffc1" +
    "\042\uffc1\043\uffc1\045\uffc1\046\uffc1\050\uffc1\051\uffc1\053" +
    "\uffc1\054\uffc1\057\uffc1\001\002\000\036\010\uffc0\031\uffc0" +
    "\036\uffc0\037\uffc0\041\uffc0\042\uffc0\043\uffc0\045\uffc0\046" +
    "\uffc0\050\uffc0\051\uffc0\053\uffc0\054\uffc0\057\uffc0\001\002" +
    "\000\036\010\uffc2\031\uffc2\036\uffc2\037\uffc2\041\uffc2\042" +
    "\uffc2\043\uffc2\045\uffc2\046\uffc2\050\uffc2\051\uffc2\053\uffc2" +
    "\054\uffc2\057\uffc2\001\002\000\004\030\053\001\002\000" +
    "\032\004\113\005\131\007\136\010\070\023\110\024\130" +
    "\026\126\030\125\036\102\044\132\056\135\057\120\001" +
    "\002\000\006\013\143\025\330\001\002\000\004\030\053" +
    "\001\002\000\036\010\uffc9\031\uffc9\036\uffc9\037\uffc9\041" +
    "\uffc9\042\uffc9\043\uffc9\045\uffc9\046\uffc9\050\uffc9\051\uffc9" +
    "\053\uffc9\054\uffc9\057\uffc9\001\002\000\036\010\uffc8\031" +
    "\uffc8\036\uffc8\037\uffc8\041\uffc8\042\uffc8\043\uffc8\045\uffc8" +
    "\046\uffc8\050\uffc8\051\uffc8\053\uffc8\054\uffc8\057\uffc8\001" +
    "\002\000\004\034\341\001\002\000\010\010\070\036\102" +
    "\057\207\001\002\000\010\025\336\026\212\035\211\001" +
    "\002\000\006\003\337\034\340\001\002\000\036\010\uffbc" +
    "\031\uffbc\036\uffbc\037\uffbc\041\uffbc\042\uffbc\043\uffbc\045" +
    "\uffbc\046\uffbc\050\uffbc\051\uffbc\053\uffbc\054\uffbc\057\uffbc" +
    "\001\002\000\036\010\uffbe\031\uffbe\036\uffbe\037\uffbe\041" +
    "\uffbe\042\uffbe\043\uffbe\045\uffbe\046\uffbe\050\uffbe\051\uffbe" +
    "\053\uffbe\054\uffbe\057\uffbe\001\002\000\036\010\uffbd\031" +
    "\uffbd\036\uffbd\037\uffbd\041\uffbd\042\uffbd\043\uffbd\045\uffbd" +
    "\046\uffbd\050\uffbd\051\uffbd\053\uffbd\054\uffbd\057\uffbd\001" +
    "\002\000\004\002\uffdf\001\002\000\004\002\001\001\002" +
    "\000\012\003\345\024\347\032\346\034\351\001\002\000" +
    "\024\003\ufff6\034\372\037\ufff6\040\ufff6\041\ufff6\042\ufff6" +
    "\043\ufff6\055\ufff6\057\ufff6\001\002\000\032\004\113\005" +
    "\131\007\136\010\070\023\110\024\130\026\126\030\125" +
    "\036\102\044\132\056\135\057\120\001\002\000\020\003" +
    "\355\025\356\037\006\041\031\042\011\043\005\057\014" +
    "\001\002\000\004\030\053\001\002\000\022\003\ufff8\037" +
    "\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\055\ufff8\057\ufff8" +
    "\001\002\000\022\003\uffee\037\uffee\040\uffee\041\uffee\042" +
    "\uffee\043\uffee\055\uffee\057\uffee\001\002\000\004\030\uffed" +
    "\001\002\000\010\010\033\036\364\057\365\001\002\000" +
    "\004\025\363\001\002\000\004\030\uffec\001\002\000\006" +
    "\025\361\033\360\001\002\000\014\037\006\041\031\042" +
    "\011\043\005\057\014\001\002\000\004\030\uffe9\001\002" +
    "\000\004\030\uffea\001\002\000\004\030\uffeb\001\002\000" +
    "\004\057\366\001\002\000\006\025\uffe7\033\uffe7\001\002" +
    "\000\006\025\uffe8\033\uffe8\001\002\000\010\003\370\013" +
    "\143\034\371\001\002\000\022\003\ufff5\037\ufff5\040\ufff5" +
    "\041\ufff5\042\ufff5\043\ufff5\055\ufff5\057\ufff5\001\002\000" +
    "\022\003\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9" +
    "\055\ufff9\057\ufff9\001\002\000\022\003\ufff7\037\ufff7\040" +
    "\ufff7\041\ufff7\042\ufff7\043\ufff7\055\ufff7\057\ufff7\001\002" +
    "\000\004\002\000\001\002\000\014\037\006\041\031\042" +
    "\011\043\005\057\014\001\002\000\006\010\033\017\376" +
    "\001\002\000\004\026\377\001\002\000\004\056\u0100\001" +
    "\002\000\004\027\u0101\001\002\000\044\003\uffe2\010\uffe2" +
    "\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021" +
    "\uffe2\022\uffe2\025\uffe2\027\uffe2\031\uffe2\033\uffe2\034\uffe2" +
    "\036\uffe2\057\uffe2\001\002\000\004\032\u0103\001\002\000" +
    "\014\037\006\041\031\042\011\043\005\057\014\001\002" +
    "\000\006\010\033\034\u0105\001\002\000\022\003\uffe6\037" +
    "\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\055\uffe6\057\uffe6" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0103\000\022\002\006\003\017\004\016\005\012\007" +
    "\007\013\020\014\014\015\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\002\342\003\017\004\016" +
    "\005\012\007\007\013\020\014\014\015\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\041\014\027\001\001\000\006\006" +
    "\026\014\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\035\014\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\341\001" +
    "\001\000\002\001\001\000\004\016\051\001\001\000\002" +
    "\001\001\000\036\014\072\017\070\020\073\021\071\022" +
    "\075\023\061\024\057\025\054\026\100\027\076\030\062" +
    "\031\074\045\064\046\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\032\123\035\317\036\122\037\121\040" +
    "\116\041\115\042\113\043\111\044\110\045\114\046\056" +
    "\052\132\053\133\055\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\267\001\001\000\004\046\263\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\014\072\017\253\020\073\021\071\022\075\023" +
    "\061\024\057\025\054\026\100\027\076\030\062\031\074" +
    "\045\064\046\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\247\001\001\000\002\001\001\000\004\016" +
    "\246\001\001\000\004\014\105\001\001\000\002\001\001" +
    "\000\036\032\123\035\120\036\122\037\121\040\116\041" +
    "\115\042\113\043\111\044\110\045\114\046\056\052\132" +
    "\053\133\055\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\164" +
    "\001\001\000\002\001\001\000\004\050\160\001\001\000" +
    "\004\047\152\001\001\000\004\033\222\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\032\123\035\177\036\122\037\121\040\116" +
    "\041\115\042\113\043\111\044\110\045\114\046\056\052" +
    "\132\053\133\055\126\056\200\001\001\000\040\032\123" +
    "\035\172\036\122\037\121\040\116\041\115\042\113\043" +
    "\111\044\110\045\114\046\056\052\132\053\133\054\173" +
    "\055\126\001\001\000\002\001\001\000\036\032\123\035" +
    "\140\036\122\037\121\040\116\041\115\042\113\043\111" +
    "\044\110\045\114\046\056\052\132\053\133\055\126\001" +
    "\001\000\002\001\001\000\004\014\137\001\001\000\022" +
    "\032\123\043\136\044\110\045\114\046\056\052\132\053" +
    "\133\055\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\032\123\036\143" +
    "\037\121\040\116\041\115\042\113\043\111\044\110\045" +
    "\114\046\056\052\132\053\133\055\126\001\001\000\002" +
    "\001\001\000\032\032\123\037\145\040\116\041\115\042" +
    "\113\043\111\044\110\045\114\046\056\052\132\053\133" +
    "\055\126\001\001\000\002\001\001\000\030\032\123\040" +
    "\170\041\115\042\113\043\111\044\110\045\114\046\056" +
    "\052\132\053\133\055\126\001\001\000\030\032\123\040" +
    "\150\041\115\042\113\043\111\044\110\045\114\046\056" +
    "\052\132\053\133\055\126\001\001\000\004\047\152\001" +
    "\001\000\002\001\001\000\026\032\123\041\156\042\113" +
    "\043\111\044\110\045\114\046\056\052\132\053\133\055" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\050\160\001\001\000\002\001\001\000" +
    "\024\032\123\042\162\043\111\044\110\045\114\046\056" +
    "\052\132\053\133\055\126\001\001\000\002\001\001\000" +
    "\004\051\164\001\001\000\002\001\001\000\022\032\123" +
    "\043\167\044\110\045\114\046\056\052\132\053\133\055" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\152\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\032\123\035\172" +
    "\036\122\037\121\040\116\041\115\042\113\043\111\044" +
    "\110\045\114\046\056\052\132\053\133\054\176\055\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\032\123" +
    "\035\177\036\122\037\121\040\116\041\115\042\113\043" +
    "\111\044\110\045\114\046\056\052\132\053\133\055\126" +
    "\056\204\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\045\207\046\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\032\123\035\216\036" +
    "\122\037\121\040\116\041\115\042\113\043\111\044\110" +
    "\045\114\046\056\052\132\053\133\055\126\001\001\000" +
    "\036\032\123\035\213\036\122\037\121\040\116\041\115" +
    "\042\113\043\111\044\110\045\114\046\056\052\132\053" +
    "\133\055\126\001\001\000\002\001\001\000\004\016\215" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\032\123\034\224\035\225" +
    "\036\122\037\121\040\116\041\115\042\113\043\111\044" +
    "\110\045\114\046\056\052\132\053\133\055\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\032\123\034\232\035\225\036\122\037\121\040\116\041" +
    "\115\042\113\043\111\044\110\045\114\046\056\052\132" +
    "\053\133\055\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\032\123\035\235\036\122" +
    "\037\121\040\116\041\115\042\113\043\111\044\110\045" +
    "\114\046\056\052\132\053\133\055\126\001\001\000\002" +
    "\001\001\000\036\032\123\035\237\036\122\037\121\040" +
    "\116\041\115\042\113\043\111\044\110\045\114\046\056" +
    "\052\132\053\133\055\126\001\001\000\002\001\001\000" +
    "\006\045\241\046\056\001\001\000\002\001\001\000\036" +
    "\032\123\035\243\036\122\037\121\040\116\041\115\042" +
    "\113\043\111\044\110\045\114\046\056\052\132\053\133" +
    "\055\126\001\001\000\002\001\001\000\004\016\245\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\045\251\046\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\032\123\035\261\036" +
    "\122\037\121\040\116\041\115\042\113\043\111\044\110" +
    "\045\114\046\056\052\132\053\133\055\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\045\265\046\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\032\123\035" +
    "\274\036\122\037\121\040\116\041\115\042\113\043\111" +
    "\044\110\045\114\046\056\052\132\053\133\055\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\032\123\035" +
    "\302\036\122\037\121\040\116\041\115\042\113\043\111" +
    "\044\110\045\114\046\056\052\132\053\133\055\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\314\001\001\000\036\032\123\035\307\036" +
    "\122\037\121\040\116\041\115\042\113\043\111\044\110" +
    "\045\114\046\056\052\132\053\133\055\126\001\001\000" +
    "\002\001\001\000\004\016\311\001\001\000\002\001\001" +
    "\000\004\016\313\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\316\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\331\001\001\000\036" +
    "\032\123\035\326\036\122\037\121\040\116\041\115\042" +
    "\113\043\111\044\110\045\114\046\056\052\132\053\133" +
    "\055\126\001\001\000\002\001\001\000\004\016\330\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\045\334\046\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\347\001\001\000\002\001\001\000\036\032\123\035\366" +
    "\036\122\037\121\040\116\041\115\042\113\043\111\044" +
    "\110\045\114\046\056\052\132\053\133\055\126\001\001" +
    "\000\010\011\352\012\356\014\353\001\001\000\004\016" +
    "\351\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\361\012\356\014\353" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\374\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\u0103\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorAST$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorAST$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorAST$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErrores();
   AnalizadorLexico alex = (AnalizadorLexico)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErrores errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorAST$actions {
  private final ConstructorAST parser;

  /** Constructor */
  CUP$ConstructorAST$actions(ConstructorAST parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorAST$do_action_part00000000(
    int                        CUP$ConstructorAST$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorAST$parser,
    java.util.Stack            CUP$ConstructorAST$stack,
    int                        CUP$ConstructorAST$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorAST$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorAST$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROG ::= DEC PROG 
            {
              Programa RESULT =null;
		Declaracion dec = (Declaracion)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 p.addDec(dec); RESULT = p; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("PROG",0, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROG EOF 
            {
              Object RESULT =null;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorAST$parser.done_parsing();
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROG ::= FUNMAIN 
            {
              Programa RESULT =null;
		DecFuncion funMain = (DecFuncion)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = new Programa(funMain); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("PROG",0, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROG ::= error 
            {
              Programa RESULT =null;
		 System.out.println("ERROR: No se ha definido la funcion Main"); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("PROG",0, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DEC ::= DECVAR 
            {
              Declaracion RESULT =null;
		DecVar d = (DecVar)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = d; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DEC",1, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DEC ::= DECSTRUCT 
            {
              Declaracion RESULT =null;
		DecStruct d = (DecStruct)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = d; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DEC",1, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DEC ::= DECFUN 
            {
              Declaracion RESULT =null;
		DecFuncion d = (DecFuncion)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = d; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DEC",1, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DEC ::= DECALIAS 
            {
              Declaracion RESULT =null;
		DecAlias d = (DecAlias)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = d; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DEC",1, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECVAR ::= TIPO ID IGUAL EXP PUNTOCOMA 
            {
              DecVar RESULT =null;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)).value;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = new DecVar(t, iden.lexema, e); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DECVAR",2, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECVAR ::= TIPO ID PUNTOCOMA 
            {
              DecVar RESULT =null;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = new DecVar(t, iden.lexema); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DECVAR",2, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECVAR ::= TIPO ID error PUNTOCOMA 
            {
              DecVar RESULT =null;
		 System.out.println("ERROR: Error en la declaracion"); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DECVAR",2, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECVAR ::= TIPO ID error 
            {
              DecVar RESULT =null;
		 System.out.println("ERROR: Falta ; al final de la declaracion"); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DECVAR",2, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECVAR ::= TIPO ID IGUAL EXP error 
            {
              DecVar RESULT =null;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)).value;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 System.out.println("ERROR: Falta ; al final de la declaracion"); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DECVAR",2, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECSTRUCT ::= STRUCTX ID LAP DECSOFSTRUCT LCIERRE PUNTOCOMA 
            {
              DecStruct RESULT =null;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)).value;
		ArrayList<DecVar> campos = (ArrayList<DecVar>)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		 RESULT = new DecStruct(iden.lexema, campos); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DECSTRUCT",3, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECSTRUCT ::= STRUCTX ID LAP DECSOFSTRUCT LCIERRE error 
            {
              DecStruct RESULT =null;
		 System.out.println("ERROR: Falta ; al final de la declaracion del StructX"); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DECSTRUCT",3, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECSTRUCT ::= STRUCTX ID error DECSOFSTRUCT LCIERRE PUNTOCOMA 
            {
              DecStruct RESULT =null;
		 System.out.println("ERROR: Falta llave de apertura del StructX"); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DECSTRUCT",3, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECSOFSTRUCT ::= TIPO ID PUNTOCOMA DECSOFSTRUCT 
            {
              ArrayList<DecVar> RESULT =null;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		ArrayList<DecVar> listaCampos = (ArrayList<DecVar>)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 listaCampos.add(new DecVar(t, iden.lexema)); RESULT = listaCampos; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DECSOFSTRUCT",4, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECSOFSTRUCT ::= 
            {
              ArrayList<DecVar> RESULT =null;
		 RESULT = new ArrayList<DecVar>(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DECSOFSTRUCT",4, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECSOFSTRUCT ::= TIPO ID error 
            {
              ArrayList<DecVar> RESULT =null;
		 System.out.println("ERROR: Falta ; en alguna declaracion del StructX"); RESULT = new ArrayList<DecVar>(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DECSOFSTRUCT",4, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECFUN ::= TIPO ID PARAMS BLOQUE 
            {
              DecFuncion RESULT =null;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		ArrayList<Parametro> listaParams = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		ArrayList<Instruction> listaInst = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = new DecFuncion(t, iden.lexema, listaParams, listaInst); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DECFUN",5, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARAMS ::= PAP MANYPARAMS 
            {
              ArrayList<Parametro> RESULT =null;
		ArrayList<Parametro> listaParams = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = listaParams; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("PARAMS",6, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PARAMS ::= PAP PCIERRE 
            {
              ArrayList<Parametro> RESULT =null;
		 RESULT = new ArrayList<Parametro>(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("PARAMS",6, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARAMS ::= PAP error PCIERRE 
            {
              ArrayList<Parametro> RESULT =null;
		 System.out.println("ERROR: Error en los parametros de la funcion"); RESULT = new ArrayList<Parametro>(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("PARAMS",6, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MANYPARAMS ::= PARAM COMA MANYPARAMS 
            {
              ArrayList<Parametro> RESULT =null;
		Parametro param = (Parametro)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		ArrayList<Parametro> listaParams = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 listaParams.add(param); RESULT = listaParams; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("MANYPARAMS",7, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MANYPARAMS ::= PARAM PCIERRE 
            {
              ArrayList<Parametro> RESULT =null;
		Parametro param = (Parametro)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 ArrayList<Parametro> listaParams = new ArrayList<Parametro>(); listaParams.add(param); RESULT = listaParams; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("MANYPARAMS",7, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PARAM ::= TIPO AMPERSAND ID 
            {
              Parametro RESULT =null;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = new Parametro(t, Boolean.FALSE, iden.lexema); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("PARAM",8, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PARAM ::= TIPO ID 
            {
              Parametro RESULT =null;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = new Parametro(t, Boolean.TRUE, iden.lexema); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("PARAM",8, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECALIAS ::= ALIAS ID IGUAL TIPO PUNTOCOMA 
            {
              DecAlias RESULT =null;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = new DecAlias(iden.lexema, t); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DECALIAS",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIPO ::= INTX 
            {
              Type RESULT =null;
		 RESULT = new IntXType(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TIPO ::= BOOLX 
            {
              Type RESULT =null;
		 RESULT = new BoolXType(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIPO ::= VOIDX 
            {
              Type RESULT =null;
		 RESULT = new VoidXType(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIPO ::= LISTX MENOR TIPO MAYOR CAP ENT CCIERRE 
            {
              Type RESULT =null;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)).value;
		TokenValue ent = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = new ListXType(t, new Ent(ent.lexema)); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPO ::= ID 
            {
              Type RESULT =null;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = new AliasXType(iden.lexema); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPO ::= TIPO AST 
            {
              Type RESULT =null;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = new PointerType(t); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FUNMAIN ::= INTX MAIN PAP PCIERRE BLOQUE 
            {
              DecFuncion RESULT =null;
		ArrayList<Instruction> listaInst = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = new DecFuncion(new IntXType(), "main", new ArrayList<Parametro>(), listaInst); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("FUNMAIN",11, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FUNMAIN ::= INTX MAIN PAP error PCIERRE BLOQUE 
            {
              DecFuncion RESULT =null;
		 System.out.println("ERROR: La funcion Main no puede recibir argumentos"); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("FUNMAIN",11, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BLOQUE ::= LAP LISTAINST 
            {
              ArrayList<Instruction> RESULT =null;
		ArrayList<Instruction> listaInst = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = listaInst; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("BLOQUE",12, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BLOQUE ::= LAP LCIERRE 
            {
              ArrayList<Instruction> RESULT =null;
		 RESULT = new ArrayList<Instruction>(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("BLOQUE",12, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LISTAINST ::= INST LISTAINST 
            {
              ArrayList<Instruction> RESULT =null;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		ArrayList<Instruction> listaInst = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 listaInst.add(inst); RESULT = listaInst; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LISTAINST",13, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LISTAINST ::= INST LCIERRE 
            {
              ArrayList<Instruction> RESULT =null;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 ArrayList<Instruction> listaInst = new ArrayList<Instruction>(); listaInst.add(inst); RESULT = listaInst; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LISTAINST",13, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INST ::= IFINST 
            {
              Instruction RESULT =null;
		IfInst inst = (IfInst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = inst; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INST",14, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INST ::= FORINST 
            {
              Instruction RESULT =null;
		ForInst inst = (ForInst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = inst; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INST",14, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INST ::= WHILEINST 
            {
              Instruction RESULT =null;
		WhileInst inst = (WhileInst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = inst; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INST",14, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INST ::= DECVARINST 
            {
              Instruction RESULT =null;
		DecVarInst inst = (DecVarInst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = inst; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INST",14, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INST ::= ASIGINST 
            {
              Instruction RESULT =null;
		AsigInst inst = (AsigInst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = inst; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INST",14, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INST ::= RETINST 
            {
              Instruction RESULT =null;
		ReturnInst inst = (ReturnInst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = inst; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INST",14, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INST ::= READINST 
            {
              Instruction RESULT =null;
		ReadInst inst = (ReadInst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = inst; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INST",14, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INST ::= WRITEINST 
            {
              Instruction RESULT =null;
		WriteInst inst = (WriteInst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = inst; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INST",14, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INST ::= LLAMADAFUN 
            {
              Instruction RESULT =null;
		LlamadaFunInst inst = (LlamadaFunInst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = inst; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INST",14, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IFINST ::= IF PAP EXP PCIERRE BLOQUE ELSE BLOQUE 
            {
              IfInst RESULT =null;
		E cond = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)).value;
		ArrayList<Instruction> listaInstIf = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		ArrayList<Instruction> listaInstElse = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = new IfInst(cond, listaInstIf, listaInstElse); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("IFINST",15, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IFINST ::= IF PAP EXP PCIERRE BLOQUE 
            {
              IfInst RESULT =null;
		E cond = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		ArrayList<Instruction> listaInstIf = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = new IfInst(cond, listaInstIf); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("IFINST",15, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IFINST ::= IF error BLOQUE 
            {
              IfInst RESULT =null;
		 System.out.println("ERROR: Error en la condicion del If"); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("IFINST",15, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IFINST ::= IF error BLOQUE ELSE BLOQUE 
            {
              IfInst RESULT =null;
		 System.out.println("ERROR: Error en la condicion del If"); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("IFINST",15, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FORINST ::= FOR PAP TIPO ID IGUAL EXP PUNTOCOMA EXP PUNTOCOMA ACCESO IGUAL EXP PCIERRE BLOQUE 
            {
              ForInst RESULT =null;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-11)).value;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-10)).value;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-8)).value;
		E cond = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-6)).value;
		Acceso ac = (Acceso)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)).value;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		ArrayList<Instruction> listaInst = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = new ForInst(new DecVarInst(t, iden.lexema, e1), cond, new AsigInst(ac, e2), listaInst); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("FORINST",16, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FORINST ::= FOR PAP PUNTOCOMA EXP PUNTOCOMA ACCESO IGUAL EXP PCIERRE BLOQUE 
            {
              ForInst RESULT =null;
		E cond = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-6)).value;
		Acceso ac = (Acceso)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		ArrayList<Instruction> listaInst = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = new ForInst(cond, new AsigInst(ac, e), listaInst); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("FORINST",16, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FORINST ::= FOR error BLOQUE 
            {
              ForInst RESULT =null;
		 System.out.println("ERROR: Error en las condiciones del For"); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("FORINST",16, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // WHILEINST ::= WHILE PAP EXP PCIERRE BLOQUE 
            {
              WhileInst RESULT =null;
		E cond = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		ArrayList<Instruction> listaInst = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = new WhileInst(cond, listaInst); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("WHILEINST",17, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // WHILEINST ::= WHILE error BLOQUE 
            {
              WhileInst RESULT =null;
		 System.out.println("ERROR: Error en las condiciones del While"); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("WHILEINST",17, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECVARINST ::= TIPO ID IGUAL EXP PUNTOCOMA 
            {
              DecVarInst RESULT =null;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)).value;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = new DecVarInst(t, iden.lexema, e); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DECVARINST",18, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECVARINST ::= TIPO ID PUNTOCOMA 
            {
              DecVarInst RESULT =null;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = new DecVarInst(t, iden.lexema); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DECVARINST",18, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECVARINST ::= TIPO ID error 
            {
              DecVarInst RESULT =null;
		 System.out.println("ERROR: Error en la declaracion"); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DECVARINST",18, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ASIGINST ::= ACCESO IGUAL EXP PUNTOCOMA 
            {
              AsigInst RESULT =null;
		Acceso ac = (Acceso)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = new AsigInst(ac, e); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ASIGINST",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ASIGINST ::= ACCESO IGUAL EXP error 
            {
              AsigInst RESULT =null;
		 System.out.println("ERROR: Falta ; en la asignacion"); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ASIGINST",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // RETINST ::= RETURN EXP PUNTOCOMA 
            {
              ReturnInst RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = new ReturnInst(e); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("RETINST",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // RETINST ::= RETURN PUNTOCOMA 
            {
              ReturnInst RESULT =null;
		 RESULT = new ReturnInst(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("RETINST",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // RETINST ::= RETURN EXP error 
            {
              ReturnInst RESULT =null;
		 System.out.println("ERROR: Falta ; en el RETURN"); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("RETINST",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // RETINST ::= RETURN error 
            {
              ReturnInst RESULT =null;
		 System.out.println("ERROR: Falta ; en el RETURN"); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("RETINST",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // READINST ::= READ PAP ACCESO PCIERRE PUNTOCOMA 
            {
              ReadInst RESULT =null;
		Acceso ac = (Acceso)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		 RESULT = new ReadInst(ac); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("READINST",21, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // READINST ::= READ error PUNTOCOMA 
            {
              ReadInst RESULT =null;
		 System.out.println("ERROR: Error en los argumentos de la instruccion Read"); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("READINST",21, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // READINST ::= READ PAP ACCESO PCIERRE error 
            {
              ReadInst RESULT =null;
		 System.out.println("ERROR: Falta ; en el Read"); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("READINST",21, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // WRITEINST ::= WRITE PAP EXP PCIERRE PUNTOCOMA 
            {
              WriteInst RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		 RESULT = new WriteInst(e); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("WRITEINST",22, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // WRITEINST ::= WRITE error PUNTOCOMA 
            {
              WriteInst RESULT =null;
		 System.out.println("ERROR:  Error en los argumentos de la instruccion Write"); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("WRITEINST",22, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // WRITEINST ::= WRITE PAP EXP PCIERRE error 
            {
              WriteInst RESULT =null;
		 System.out.println("ERROR: Falta ; en el Write"); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("WRITEINST",22, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LLAMADAFUN ::= ID ARGS PUNTOCOMA 
            {
              LlamadaFunInst RESULT =null;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		ArrayList<E> listArgs = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = new LlamadaFunInst(iden.lexema, listArgs); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LLAMADAFUN",23, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LLAMADAFUN ::= ID ARGS error 
            {
              LlamadaFunInst RESULT =null;
		 System.out.println("ERROR: Falta ; en la llamada a la funcion"); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LLAMADAFUN",23, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ARGS ::= PAP MANYARGS 
            {
              ArrayList<E> RESULT =null;
		ArrayList<E> listArgs = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = listArgs; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ARGS",25, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ARGS ::= PAP PCIERRE 
            {
              ArrayList<E> RESULT =null;
		 RESULT = new ArrayList<E>(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ARGS",25, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ARGS ::= PAP error PCIERRE 
            {
              ArrayList<E> RESULT =null;
		 System.out.println("Error en los argumentos de la llamada a funcion"); RESULT = new ArrayList<E>(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ARGS",25, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // MANYARGS ::= EXP COMA MANYARGS 
            {
              ArrayList<E> RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		ArrayList<E> listaArgs = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 listaArgs.add(e); RESULT = listaArgs; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("MANYARGS",26, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // MANYARGS ::= EXP PCIERRE 
            {
              ArrayList<E> RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 ArrayList<E> listaArgs = new ArrayList<E>(); listaArgs.add(e); RESULT = listaArgs; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("MANYARGS",26, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= EXP OR E1 
            {
              E RESULT =null;
		E opnd1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		E opnd2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = new EBin(opnd1, KindE.OR, opnd2); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("EXP",27, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= E1 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = e; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("EXP",27, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E1 ::= E1 AND E2 
            {
              E RESULT =null;
		E opnd1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		E opnd2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = new EBin(opnd1, KindE.AND, opnd2); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E1",28, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E1 ::= E2 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = e; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E1",28, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E2 ::= E2 EQ E3 
            {
              E RESULT =null;
		E opnd1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		E opnd2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = new EBin(opnd1, KindE.EQ, opnd2); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E2",29, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E2 ::= E2 NOTEQ E3 
            {
              E RESULT =null;
		E opnd1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		E opnd2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = new EBin(opnd1, KindE.NOTEQ, opnd2); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E2",29, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E2 ::= E3 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = e; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E2",29, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E3 ::= E3 OP0 E4 
            {
              E RESULT =null;
		E opnd1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		KindE op = (KindE)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		E opnd2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = new EBin(opnd1, op, opnd2); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E3",30, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E3 ::= E4 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = e; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E3",30, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E3 ::= NEW TIPO 
            {
              E RESULT =null;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = new NewExp(t); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E3",30, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E4 ::= E4 OP1 E5 
            {
              E RESULT =null;
		E opnd1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		KindE op = (KindE)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		E opnd2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = new EBin(opnd1, op, opnd2); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E4",31, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E4 ::= E5 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = e; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E4",31, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E5 ::= E5 OP2 E6 
            {
              E RESULT =null;
		E opnd1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		KindE op = (KindE)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		E opnd2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = new EBin(opnd1, op, opnd2); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E5",32, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E5 ::= E6 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = e; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E5",32, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E6 ::= OP3 E6 
            {
              E RESULT =null;
		KindE op = (KindE)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		E opnd1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = new EUnaria(op, opnd1); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E6",33, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E6 ::= E7 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = e; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E6",33, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E7 ::= ACCESO 
            {
              E RESULT =null;
		Acceso ac = (Acceso)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = ac; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",34, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E7 ::= TRUE 
            {
              E RESULT =null;
		 RESULT = new Bool(Boolean.TRUE); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",34, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // E7 ::= FALSE 
            {
              E RESULT =null;
		 RESULT = new Bool(Boolean.FALSE); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",34, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // E7 ::= ENT 
            {
              E RESULT =null;
		TokenValue ent = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = new Ent(ent.lexema); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",34, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // E7 ::= PAP EXP PCIERRE 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = e; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",34, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // E7 ::= EXPARRAY 
            {
              E RESULT =null;
		ExpArray e = (ExpArray)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = e; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",34, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // E7 ::= EXPSTRUCT 
            {
              E RESULT =null;
		ExpStruct e = (ExpStruct)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = e; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",34, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // E7 ::= LLAMADAFUNEXP 
            {
              E RESULT =null;
		ExpLlamadaFun e = (ExpLlamadaFun)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = e; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",34, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ACCESO ::= ACCESO CAP EXP CCIERRE 
            {
              Acceso RESULT =null;
		Acceso ac = (Acceso)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		E index = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = new AccesoArray(ac, index); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ACCESO",35, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ACCESO ::= ACCESO FLECHA ID 
            {
              Acceso RESULT =null;
		Acceso ac = (Acceso)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		TokenValue campo = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = new AccesoStruct(ac, campo.lexema); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ACCESO",35, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ACCESO ::= ACCESO0 
            {
              Acceso RESULT =null;
		Acceso ac = (Acceso)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = ac; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ACCESO",35, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ACCESO0 ::= ID 
            {
              Acceso RESULT =null;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = new AccesoVar(iden.lexema); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ACCESO0",36, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ACCESO0 ::= AST ACCESO0 
            {
              Acceso RESULT =null;
		Acceso ac = (Acceso)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = new AccesoPointer(ac); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ACCESO0",36, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ACCESO0 ::= AMPERSAND ACCESO0 
            {
              Acceso RESULT =null;
		Acceso ac = (Acceso)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = new AccesoDir(ac); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ACCESO0",36, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ACCESO0 ::= AST PAP ACCESO PCIERRE 
            {
              Acceso RESULT =null;
		Acceso ac = (Acceso)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = new AccesoPointer(ac); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ACCESO0",36, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ACCESO0 ::= AMPERSAND PAP ACCESO PCIERRE 
            {
              Acceso RESULT =null;
		Acceso ac = (Acceso)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = new AccesoDir(ac); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ACCESO0",36, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXPARRAY ::= CAP MANYELEMSARRAY 
            {
              ExpArray RESULT =null;
		ArrayList<E> list = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = new ExpArray(list); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("EXPARRAY",41, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPARRAY ::= CAP CCIERRE 
            {
              ExpArray RESULT =null;
		 RESULT = new ExpArray(new ArrayList<E>()); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("EXPARRAY",41, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // MANYELEMSARRAY ::= EXP COMA MANYELEMSARRAY 
            {
              ArrayList<E> RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		ArrayList<E> list = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 list.add(e); RESULT = list; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("MANYELEMSARRAY",42, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // MANYELEMSARRAY ::= EXP CCIERRE 
            {
              ArrayList<E> RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 ArrayList<E> list = new ArrayList<E>(); list.add(e); RESULT = list; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("MANYELEMSARRAY",42, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXPSTRUCT ::= LAP MANYELEMSSTRUCT 
            {
              ExpStruct RESULT =null;
		ArrayList<E> list = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = new ExpStruct(list); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("EXPSTRUCT",43, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXPSTRUCT ::= LAP LCIERRE 
            {
              ExpStruct RESULT =null;
		 RESULT = new ExpStruct(new ArrayList<E>()); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("EXPSTRUCT",43, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // MANYELEMSSTRUCT ::= EXP COMA MANYELEMSSTRUCT 
            {
              ArrayList<E> RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		ArrayList<E> list = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 list.add(e); RESULT = list; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("MANYELEMSSTRUCT",44, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // MANYELEMSSTRUCT ::= EXP LCIERRE 
            {
              ArrayList<E> RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 ArrayList<E> list = new ArrayList<E>(); list.add(e); RESULT = list; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("MANYELEMSSTRUCT",44, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // LLAMADAFUNEXP ::= ID ARGS 
            {
              ExpLlamadaFun RESULT =null;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		ArrayList<E> listArgs = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = new ExpLlamadaFun(iden.lexema, listArgs); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNEXP",24, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OP0 ::= MAYOR 
            {
              KindE RESULT =null;
		 RESULT = KindE.MAYOR; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP0",37, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OP0 ::= MENOR 
            {
              KindE RESULT =null;
		 RESULT = KindE.MENOR; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP0",37, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OP0 ::= MAYEQ 
            {
              KindE RESULT =null;
		 RESULT = KindE.MAYEQ; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP0",37, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OP0 ::= MENEQ 
            {
              KindE RESULT =null;
		 RESULT = KindE.MENEQ; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP0",37, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OP1 ::= SUMA 
            {
              KindE RESULT =null;
		 RESULT = KindE.SUMA; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP1",38, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OP1 ::= RESTA 
            {
              KindE RESULT =null;
		 RESULT = KindE.RESTA; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP1",38, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OP2 ::= AST 
            {
              KindE RESULT =null;
		 RESULT = KindE.MUL; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP2",39, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OP2 ::= DIV 
            {
              KindE RESULT =null;
		 RESULT = KindE.DIV; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP2",39, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OP2 ::= MOD 
            {
              KindE RESULT =null;
		 RESULT = KindE.MOD; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP2",39, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OP3 ::= NOT 
            {
              KindE RESULT =null;
		 RESULT = KindE.NOT; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP3",40, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OP3 ::= RESTA 
            {
              KindE RESULT =null;
		 RESULT = KindE.MENOS; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP3",40, RESULT);
            }
          return CUP$ConstructorAST$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorAST$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorAST$do_action(
    int                        CUP$ConstructorAST$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorAST$parser,
    java.util.Stack            CUP$ConstructorAST$stack,
    int                        CUP$ConstructorAST$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorAST$do_action_part00000000(
                               CUP$ConstructorAST$act_num,
                               CUP$ConstructorAST$parser,
                               CUP$ConstructorAST$stack,
                               CUP$ConstructorAST$top);
    }
}

